{"version":3,"sources":["static/Me.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","Card","style","width","borderRadius","maxWidth","Body","Title","Image","src","Me","height","marginBottom","roundedCircle","Subtitle","Text","marginTop","Link","href","icon","faLinkedinIn","size","faEnvelope","spin","faGithub","faInstagram","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,iC,iQC8D5BC,E,uKAhDX,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,MAAO,OACPC,aAAc,GACdC,SAAU,SAGZ,kBAACJ,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,KACE,8CAEF,kBAACC,EAAA,EAAD,CACEC,IAAKC,IACLR,MAAO,CAAEC,MAAO,IAAKQ,OAAQ,IAAKC,aAAc,IAChDC,eAAa,IAEf,kBAACZ,EAAA,EAAKa,SAAN,CAAed,UAAU,mBACvB,oDAEF,kBAACC,EAAA,EAAKc,KAAN,KACE,8IAKF,yBAAKb,MAAO,CAAEc,UAAW,KACvB,kBAACf,EAAA,EAAKgB,KAAN,CAAWC,KAAK,wDACd,kBAAC,IAAD,CAAiBC,KAAMC,IAAcC,KAAK,QAE5C,kBAACpB,EAAA,EAAKgB,KAAN,CAAWC,KAAK,8BACd,kBAAC,IAAD,CAAiBC,KAAMG,IAAYD,KAAK,KAAKE,MAAI,KAEnD,kBAACtB,EAAA,EAAKgB,KAAN,CAAWC,KAAK,gCACd,kBAAC,IAAD,CAAiBC,KAAMK,IAAUH,KAAK,QAExC,kBAACpB,EAAA,EAAKgB,KAAN,CAAWC,KAAK,uCACd,kBAAC,IAAD,CAAiBC,KAAMM,IAAaJ,KAAK,KAAKE,MAAI,a,GAxChDG,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6d0b693.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Me.59b66fe6.jpeg\";","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Card, Image } from \"react-bootstrap\";\nimport Me from \"./static/Me.jpeg\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faLinkedinIn,\n  faInstagram,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { faEnvelope } from \"@fortawesome/free-regular-svg-icons\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Card\n          style={{\n            width: \"27em\",\n            borderRadius: 10,\n            maxWidth: \"100%\",\n          }}\n        >\n          <Card.Body>\n            <Card.Title>\n              <h1>TENZIN TAMDIN</h1>\n            </Card.Title>\n            <Image\n              src={Me}\n              style={{ width: 130, height: 130, marginBottom: 25 }}\n              roundedCircle\n            />\n            <Card.Subtitle className=\"mb-2 text-muted\">\n              <h4>Front-end Developer</h4>\n            </Card.Subtitle>\n            <Card.Text>\n              <h5>\n                Hi! I am on journey to start my career as Front-end Developer\n                and soon jump on moblie app development too ...\n              </h5>\n            </Card.Text>\n            <div style={{ marginTop: 25 }}>\n              <Card.Link href=\"https://www.linkedin.com/in/tenzin-tamdin-587a21146/\">\n                <FontAwesomeIcon icon={faLinkedinIn} size=\"2x\" />\n              </Card.Link>\n              <Card.Link href=\"mailto:tgtamdin3@gmail.com\">\n                <FontAwesomeIcon icon={faEnvelope} size=\"2x\" spin />\n              </Card.Link>\n              <Card.Link href=\"https://github.com/tentamdin\">\n                <FontAwesomeIcon icon={faGithub} size=\"2x\" />\n              </Card.Link>\n              <Card.Link href=\"https://www.instagram.com/ttamdin5/\">\n                <FontAwesomeIcon icon={faInstagram} size=\"2x\" spin />\n              </Card.Link>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}